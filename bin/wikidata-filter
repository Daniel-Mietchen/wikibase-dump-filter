#!/usr/bin/env node
const program = require('commander')
const package = require('../package.json')
const help = require('../lib/help')
const list = val => val.split(',')

const getEntitiesStream = require('../lib/get_entities_stream')
const filterFormatAndSerializeEntity = require('../lib/filter_format_and_serialize_entity')
const { beforeFilter, afterFilter, afterNegativeFilter, updateWithLastData } = require('../lib/progress_bar_hooks')
const handleErrors = require('../lib/handle_errors')

const options = program
  .version(package.version)
  // filters
  .option('-t, --type <type>', help.type)
  .option('-c, --claim <claim>', help.claim)
  .option('-i, --sitelink <sitelink>', help.sitelink)
  // formatters
  .option('-o, --omit <attributes>', help.omit, list)
  .option('-k, --keep <attributes>', help.keep, list)
  .option('-l, --languages <languages>', help.languages, list)
  .option('-s, --simplify [boolean|options]', help.simplify)
  // misc
  .option('-p, --progress', help.progress)
  .option('-q, --quiet', help.quiet)
  .parse(process.argv)

let progress
if (process.stdout.isTTY) {
  progress = options.progress && !options.quiet
} else {
  progress = !options.quiet
}

if (progress) {
  Object.assign(options, { beforeFilter, afterFilter, afterNegativeFilter })
}

getEntitiesStream(process.stdin)
.filterAndMap(filterFormatAndSerializeEntity(options))
.on('close', updateWithLastData)
.pipe(process.stdout)
.on('error', handleErrors)
